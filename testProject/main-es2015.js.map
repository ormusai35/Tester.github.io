{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/list-posts/list-posts.component.ts","./src/app/list-posts/list-posts.component.html","./src/app/post-create/post-create.component.ts","./src/app/post-create/post-create.component.html","./src/app/server-posts.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'testProject';\n}\n","<app-post-create></app-post-create>\r\n<app-list-posts></app-list-posts>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'\n\nimport { AppComponent } from './app.component';\nimport { PostCreateComponent } from './post-create/post-create.component';\nimport { ListPostsComponent } from './list-posts/list-posts.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    ListPostsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Post } from '../Post.model';\nimport { ServerPostsService } from '../server-posts.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-list-posts',\n  templateUrl: './list-posts.component.html',\n  styleUrls: ['./list-posts.component.css']\n})\nexport class ListPostsComponent implements OnInit,OnDestroy {\n\n  posts:Post[] = [];\n  postSub: Subscription;\n\n  constructor(public serverPostsService: ServerPostsService) {}\n\n  ngOnInit(): void {\n    this.posts = this.serverPostsService.getPosts1();\n    this.serverPostsService.getPostUpdatedListener().subscribe(\n      (posts:Post[]) => {\n        this.posts = posts;\n      }\n    );\n  }\n\n  ngOnDestroy(){\n    this.postSub.unsubscribe();\n  }\n\n}\n","<ul *ngIf=\"posts.length > 0\">\n    <li *ngFor=\"let post of posts\">{{ 'title: '+ post.title + ', content: '+post.content }}</li>\n</ul>\n","import { Component, OnInit } from '@angular/core';\nimport { Post } from '../Post.model';\nimport { ServerPostsService } from '../server-posts.service';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n\n  title:string= '';\n  content:string = '';\n\n  constructor(public serverPostsService: ServerPostsService) { }\n\n  ngOnInit(): void {\n  }\n\n  onAddPost(title,content){\n    let post:Post = {\n      id:null,\n      title: title,\n      content: content\n    }\n    this.serverPostsService.addPost1(post);\n    this.serverPostsService.addPost(post);\n  }\n}\n","\n<input [(ngModel)]=\"title\">\n<textarea [(ngModel)]=\"content\" rows=\"6\"></textarea><hr>\n<button class=\"btn btn-primary\" (click)=\"onAddPost(title,content)\">Save Post</button>","import { Injectable } from '@angular/core';\nimport { Post } from './Post.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerPostsService {\n\n  private posts:Post[] = [\n    {\n        id: \"sdad24r3354f\",\n        title: \"First Post\",\n        content: \"1'st Post from the server\"\n    },\n    {\n        id: \"4khjk43h4jkh3\",\n        title: \"Second Post\",\n        content: \"2'stPost from the server\"\n    }\n  ];\n  private postUpdated = new Subject<Post[]>();\n\n  constructor(private http:HttpClient) { }\n\n  getPosts1(){\n    return [...this.posts];\n  }\n\n  addPost1(post){\n    this.posts.push(post);\n    this.postUpdated.next([...this.posts]);\n  }\n\n  getPosts(){\n    this.http.get<{posts:Post[]}>('http://localhost:3000/api/posts').subscribe(\n      (postDate) => {\n        this.posts = postDate.posts;\n        this.postUpdated.next({...this.posts}); \n      }\n    );\n  }\n\n  getPostUpdatedListener(){\n    return this.postUpdated.asObservable();\n  }\n\n  addPost(post:Post){\n    this.posts.push(post);\n     this.http.post<{message}>('http://localhost:3000/api/posts',post).subscribe(\n      (res) => {\n        console.log(res.message);\n        // this.postUpdated.next({...this.posts});\n      }\n      \n     );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}